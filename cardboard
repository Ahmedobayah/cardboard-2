#!/usr/bin/env node

var fs = require('fs'),
    Cardboard = require('./'),
    concat = require('concat-stream'),
    hat = require('hat'),
    queue = require('queue-async'),
    geojsonNormalize = require('geojson-normalize'),
    JSONStream = require('JSONStream'),
    argv = require('minimist')(process.argv.slice(2)),
    dyno = require('dyno');

require('dotenv').load();

if (!argv._.length) {
    docs();
    return console.error('database filename required');
}

var tableName = argv._[0];

console.log('endpoint', process.env.Endpoint)

var config = {
    awsKey: process.env.AWSKey,
    awsSecret:  process.env.AWSSecret,
    table: tableName,
    endpoint:  process.env.Endpoint,
    region: process.env.Region,
    bucket: process.env.Bucket || 'mapbox-s2',
    prefix: tableName
};

config.coverOpts ={};

config.coverOpts.max_query_cells = process.env.MAX_QUERY_CELLS || 100;
config.coverOpts.query_min_level = process.env.QUERY_MIN_LEVEL || 1;
config.coverOpts.query_max_level = process.env.QUERY_MAX_LEVEL || 5;
config.coverOpts.max_index_cells = process.env.MAX_INDEX_CELLS || 100;
config.coverOpts.index_min_level = process.env.INDEX_MIN_LEVEL || 5;
config.coverOpts.index_max_level = process.env.INDEX_MAX_LEVEL || 8;
config.coverOpts.index_point_level = process.env.INDEX_POINT_LEVEL || 15;

var cardboard = new Cardboard(config);

cardboard.createTable(tableName, function(err){
    if (err) {
        console.error(err);
        throw err;
    }

    console.error('your table is ready', tableName);
    ready();
});

function ready() {
    if (!process.stdin.isTTY) {
        process.stdin.pipe(concat(function(buf) {
            var q = queue(10);
            var gj = geojsonNormalize(JSON.parse(buf));
            gj.features.forEach(function(feature) {
                var id = (((feature.id !== undefined) ?
                    feature.id : feature.properties.id)) || hat();
                q.defer(cardboard.insert.bind(cardboard), id, feature, argv.dataset || 'default');
            });
            q.awaitAll(function(err, res) {
                if (err) console.error(err);
                else console.log('inserted');
            });
        }));
        return;
    }
    if (argv.export) {
        cardboard.export()
            .pipe(process.stdout);
    } else if (argv.dump === 'geojson') {
        cardboard.dumpGeoJSON()
            .pipe(process.stdout);
    } else if (argv.dump) {
        cardboard.dump()
            .pipe(JSONStream.stringify())
            .pipe(process.stdout);
    } else if (argv.query) {
        cardboard.bboxQuery(
            argv.query.split(',').map(function(q) { return parseFloat(q); }),
            argv.dataset || 'default',
            function(err, data) {
                if (err) return console.log(err);
                data.forEach(function(d) {
                    console.log(JSON.stringify(d.val.properties, null, 2));
                });
            });
    }
}

function docs() {
    fs.createReadStream(__dirname + '/CLI.md').pipe(process.stdout);
}
