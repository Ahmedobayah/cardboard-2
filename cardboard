#!/usr/bin/env node

var fs = require('fs'),
    Cardboard = require('./'),
    concat = require('concat-stream'),
    hat = require('hat'),
    geojsonNormalize = require('geojson-normalize'),
    JSONStream = require('JSONStream'),
    argv = require('minimist')(process.argv.slice(2)),
    dyno = require('dyno');

require('dotenv').load();

if (!argv._.length) {
    docs();
    return console.error('database filename required');
}

var config = {
    awsKey: process.env.awsKey || 'fake',
    awsSecret:  process.env.awsSecret || 'fake',
    table: argv._[0],
    endpoint: 'http://localhost:4567',
    region: process.env.Region
};

var dyno = require('dyno')(config);

var cardboard = new Cardboard(config);

var table = require('./lib/table.json');
table.TableName = argv._[0];

dyno.createTable(table, function(err) {
    if (err) {
        console.error(err);
        throw err;
    }
    ready();
});

function ready() {
    if (!process.stdin.isTTY) {
        process.stdin.pipe(concat(function(buf) {
            var gj = geojsonNormalize(JSON.parse(buf));
            gj.features.forEach(function(feature) {
                var id = (((feature.id !== undefined) ?
                    feature.id : feature.properties.id)) || hat();
                cardboard.insert(id, feature, 'default', function(err) {
                    if (err) throw err;
                });
            });
        }));
        return;
    }
    if (argv.export) {
        cardboard.export()
            .pipe(process.stdout);
    } else if(argv.dump === 'geojson') {
        cardboard.dumpGeoJSON()
            .pipe(process.stdout);
    } else if(argv.dump) {
        cardboard.dump()
            .pipe(JSONStream.stringify())
            .pipe(process.stdout);
    }else if(argv.query) {
        cardboard.bboxQuery(argv.query.split(',').map(function(q){ return parseFloat(q); }), function(err, data){
            console.log(err, data);
        });
    }
}

function docs() {
    fs.createReadStream(__dirname + '/CLI.md').pipe(process.stdout);
}
